<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ear to the Bits]]></title>
  <link href="http:///atom.xml" rel="self"/>
  <link href="http:///"/>
  <updated>2014-12-06T16:53:51-05:00</updated>
  <id>http:///</id>
  <author>
    <name><![CDATA[Cassie Tarakajian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Audio Timing Tutorial]]></title>
    <link href="http:///blog/2014/12/02/web-audio-timing-tutorial/"/>
    <updated>2014-12-02T22:56:24-05:00</updated>
    <id>http:///blog/2014/12/02/web-audio-timing-tutorial</id>
    <content type="html"><![CDATA[<p>My last post was a delirious declaration that I had finally made something with Web Audio. <a href="http://web-audio-sequencer.herokuapp.com/">Here it is</a>, a drum sequencer in the browser. Now I want to explain how I did it. First, what is Web Audio, and why do we need it?</p>

<p>The Web Audio API is a versatile system for controlling audio in the web. It does this inside an <strong>audio context</strong>, which you declare as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>You then create sources, either by loading a song or sample via an AJAX request (though you can&rsquo;t use jQuery since it doesn&rsquo;t support responses of type &lsquo;arrayBuffer&rsquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">songBuffer</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//for multiple browser support</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">AudioContext</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">AudioContext</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitAudioContext</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">loadSong</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// the url can be full path or relative</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="s1">&#39;arraybuffer&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Decode asynchronously</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">decodeAudioData</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">response</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">songBuffer</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span> <span class="nx">onError</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you have sources, you route sounds through a series of <strong>audio nodes</strong> to add effects, such as reverb, filtering, and compression. It is also <strong>modular</strong>, meaning it is simple to change the routes to add or remove effects. It is analogous to physical synthesizers and modular synthesizers. The last node in the <strong>audio routing graph</strong> is the destination node, which is responsible for actually <em>playing</em> the sounds. Here&rsquo;s a routing example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">playSound</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// creates a sound source from buffer just loaded</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">createBufferSource</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">source</span><span class="p">.</span><span class="nx">buffer</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">;</span>                    <span class="c1">// tell the source which sound to play</span>
</span><span class='line'>  <span class="nx">source</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">destination</span><span class="p">);</span>       <span class="c1">// connect source to context&#39;s destination (the speakers)</span>
</span><span class='line'>  <span class="nx">source</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>                           <span class="c1">// play the source now</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, so now we can play audio. As soon as I figured out how to do this, the first thing I wanted to learn how to do is how to sequence audio events, because that&rsquo;s how you making music: you organize sounds in time. This is a deep, dark rabbit hole. On the <a href="http://www.html5rocks.com/en/tutorials/webaudio/intro/">introduction to Web Audio tutorial</a>, they have an example which synchronizing to the Javascript clock. But this is bad. <em>Very</em> bad. The Javascript clock is not precise, and therefore if you synchronize audio events to it, there will be noticeable latency and stuttering. You must synchronize to the Web Audio clock, which is a signal from an actual hardware crystal (and therefore very precise).</p>

<p>Another problem is scheduling. Web Audio has no built in scheduler. Therefore, you have to build your own (or use a library that has one, for example, <a href="https://www.npmjs.org/package/waaclock">WAAClock</a> or <a href="https://github.com/CreateJS/SoundJS">SoundJS</a>). You also have to think how far ahead you want to schedule your audio events. For example, if you have the code (which is synchronized to the Javascript clock)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">bar</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">bar</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">startTime</span> <span class="o">+</span> <span class="nx">bar</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">*</span> <span class="nx">eighthNoteTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Play the hi-hat every eighth note.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">playSound</span><span class="p">(</span><span class="nx">hihat</span><span class="p">,</span> <span class="nx">time</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">*</span> <span class="nx">eighthNoteTime</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you want to change tempo, what do you do? You can&rsquo;t unschedule the notes once you&rsquo;ve told them to play. You would have to add a gain node to control the volume, turn off the volume on the now off-tempo loop, and then create a <em>new</em> loop with the new correct tempo. And ad infinitum every time you want to change the tempo again.</p>

<p>That&rsquo;s awful, and there is a better way. After reading <a href="http://www.html5rocks.com/en/tutorials/audio/scheduling/">A Tale of Two Clocks</a> a few times until it finally made sense. The way to make a good scheduler is to schedule one note ahead of time, and to synchronize it to the Web Audio clock. Unfortunately, it&rsquo;s easier said than done. Your scheduler function ends up looking something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">nextNoteTime</span> <span class="o">&lt;</span> <span class="nx">audioContext</span><span class="p">.</span><span class="nx">currentTime</span> <span class="o">+</span> <span class="nx">scheduleAheadTime</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">scheduleNote</span><span class="p">(</span> <span class="nx">current16thNote</span><span class="p">,</span> <span class="nx">nextNoteTime</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">nextNote</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But scheduleAheadTime and nextNoteTime have to be tweaked according to your use case. In my case, I ended up using the same parameters as used in the <a href="http://chromium.googlecode.com/svn/trunk/samples/audio/shiny-drum-machine.html">Google Shiny Drum Machine</a> and it seems to be okay. Let&rsquo;s look at my code for the core scheduling functionality:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">handlePlay</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">noteTime</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">currentTime</span> <span class="o">+</span> <span class="mf">0.005</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">schedule</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">schedule</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">currentTime</span> <span class="o">=</span> <span class="nx">context</span><span class="p">.</span><span class="nx">currentTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The sequence starts at startTime, so normalize currentTime so that it&#39;s 0 at the start of the sequence.</span>
</span><span class='line'>  <span class="nx">currentTime</span> <span class="o">-=</span> <span class="nx">startTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">noteTime</span> <span class="o">&lt;</span> <span class="nx">currentTime</span> <span class="o">+</span> <span class="mf">0.200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">contextPlayTime</span> <span class="o">=</span> <span class="nx">noteTime</span> <span class="o">+</span> <span class="nx">startTime</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Insert playing notes here</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Insert draw stuff here</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">advanceNote</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">timeoutId</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="s2">&quot;schedule()&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">advanceNote</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Setting tempo to 60 BPM just for now</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tempo</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">secondsPerBeat</span> <span class="o">=</span> <span class="mf">60.0</span> <span class="o">/</span> <span class="nx">tempo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">rhythmIndex</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">rhythmIndex</span> <span class="o">==</span> <span class="nx">LOOP_LENGTH</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">rhythmIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//0.25 because each square is a 16th note</span>
</span><span class='line'>    <span class="nx">noteTime</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">secondsPerBeat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, there&rsquo;s a lot going on here, so let&rsquo;s break this down. Note that I didn&rsquo;t include anything about playing notes or updating the visuals as I just wanted to focus on the timing/scheduling.</p>

<p>First, in handlePlay(), we reset noteTime, which represents the length of a note. And then we set startTime, which includes an offset to take into account stuff happening in the main Javascript execution time (e.g. garbage collection).</p>

<p>Then, in schedule, we first check if we need to sequence audio events, depending on noteTime and currentTime. Note that the 200 ms offset here represents the variable scheduleAheadTime in the previous example. The while loop inside of the function schedule() is run again and again until we&rsquo;ve scheduled all notes that fall within our lookahead interval. Therefore, as we schedule more notes, and increment noteTime based on the tempo of the song (in advanceNote()):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">secondsPerBeat</span> <span class="o">=</span> <span class="mf">60.0</span> <span class="o">/</span> <span class="nx">tempo</span><span class="p">;</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="nx">noteTime</span> <span class="o">+=</span> <span class="mf">0.25</span> <span class="o">*</span> <span class="nx">secondsPerBeat</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we&rsquo;re assuming a 4/4 time signature, to obtain noteTime we multipy secondsPerBeat by 0.25 since each note is a 16th note. Once we&rsquo;ve scheduled all of the notes that fall within our lookahead interval, the condition of the while loop in schedule()</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">noteTime</span> <span class="o">&lt;</span> <span class="nx">currentTime</span> <span class="o">+</span> <span class="mf">0.200</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>will fail. Lastly, what&rsquo;s with the last line of schedule()?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">timeoutId</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="s2">&quot;schedule()&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>setTimeout is a Javascript library function that executes a function after a certain period of time. Therefore, this tells Javascript to call the schedule() function after 0 ms. So basically, call schedule() again right after it&rsquo;s scheduled all notes within out lookahead interval and begin the process over again.</p>

<p>Lastly, there&rsquo;s the rhythmIndex variable in advanceNote():</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rhythmIndex</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">rhythmIndex</span> <span class="o">==</span> <span class="nx">LOOP_LENGTH</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">rhythmIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This variable simply represents where you are in the context of the loop, and resets when the sequence reaches then end so that it loops.</p>

<p>Cool, so now we can sequence audio properly! Well, kind of. As is pointed out in <a href="http://stackoverflow.com/questions/20598147/perfect-synchronization-with-web-audio-api">this StackOverflow</a>, synchronizing to the Web Audio clock does not mean that your audio is synchronized to the animation frame refresh rate. However, this is only important if you want to synchronize animations to Web Audio. For that, you can read the last section in <a href="http://www.html5rocks.com/en/tutorials/audio/scheduling/">A Tale of Two Clocks</a>.</p>

<p>If you&rsquo;ve got this scheduling thing down, and want to learn how to integrate it into our own application, I recommend checking out my code at <a href="https://github.com/catarak/web-audio-sequencer">Github</a> to see how I did it.</p>

<p>Thanks for reading, and look out for a part two of this blog post, which will explain more in depth about <strong>audio routing graphs</strong>, and different types of nodes, i.e. how to add different types of effects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Drum Machine in Your Browser]]></title>
    <link href="http:///blog/2014/11/30/decoding-web-audio/"/>
    <updated>2014-11-30T18:51:53-05:00</updated>
    <id>http:///blog/2014/11/30/decoding-web-audio</id>
    <content type="html"><![CDATA[<p>In my college career, I majored in electrical engineering, and because of this, I learned about signal processing and audio. Now that I&rsquo;m learning web development, I&rsquo;ve been eager to combine my skills and delve into Web Audio, an API that allows you to do audio processing magic in the browser. This API allows you to create websites like Soundcloud or even <a href="http://echonest.github.io/remix/">remix songs algorithmically</a>. I decided to create a basic drum machine, and then modify it to create a digital sequencer.</p>

<p>I first followed this <a href="http://www.sitepoint.com/html5-web-audio-api-tutorial-building-virtual-synth-pad/">Virtual Synth</a> tutorial, which was a great place to start, but there were a few things I didn&rsquo;t like about it:</p>

<ul>
<li>No ability to create a sequence. What good is a drum machine without a sequencer (<a href="https://www.youtube.com/watch?v=wXRnbS6o64U">unless you&rsquo;re Araabmuzik</a>)?</li>
<li>Either I implemented the filter wrong, which is very possible, or it doesn&rsquo;t work correctly. It doesn&rsquo;t use a logarithmic scale, however, which is definitely a big mistake.</li>
</ul>


<p>As I was trying to figure out how to sequence audio events, I came upon a article that went slightly above my head when I first read it. In <a href="http://www.html5rocks.com/en/tutorials/audio/scheduling/">&ldquo;A Tale of Two Clocks&rdquo;</a>, the author makes it clear that you must synchronize to the Web Audio API clock, and not the Javascript clock, since the latter is imprecise. Even slight audio stuttering is very noticeable. The author links to a sequencer created by Google engineers, called <a href="http://chromium.googlecode.com/svn/trunk/samples/audio/shiny-drum-machine.html">Shiny Drum Machine</a>, which I used for reference. The code itself is good but not great, and could definitely be organized better.</p>

<p>I threw a bunch of stuff together just to get a working app, but I think that my next step is definitely to pause for a moment and refactor.</p>

<p>I will write a tutorial in the future for this, but for now, since my brains hurts a lot, you can check out the current version of my <a href="http://web-audio-sequencer.herokuapp.com/">Web Audio Sequencer</a>. And, of course, check out <a href="https://github.com/catarak/web-audio-sequencer">my Github</a> if you want to look at the code (<a href="https://github.com/catarak/web-audio-sequencer/commit/3f4a2f08f7f84acfc85297a626ce9286a43034d6">latest commit as writing this post</a>).</p>

<p><img class="center" src="http://media.giphy.com/media/vFtWp05vBYnMQ/giphy.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons Learned From a Stupid Hackathon]]></title>
    <link href="http:///blog/2014/11/16/lessons-learned-from-a-stupid-hackathon/"/>
    <updated>2014-11-16T22:49:15-05:00</updated>
    <id>http:///blog/2014/11/16/lessons-learned-from-a-stupid-hackathon</id>
    <content type="html"><![CDATA[<p>This past weekend I went to a hackathon, called <a href="http://www.stupidhackathon.com/">Stupid Hackathon</a>. It&rsquo;s not the first hackathon I have ever been to, but it&rsquo;s the first hackathon I&rsquo;ve been to since learning web development. I was excited about it from the moment I first heard about it since the theme was &ldquo;stupid shit nobody wants and dumb ideas.&rdquo; There is so much I love about that. All in all, it was a great day, but for me, it was a massive failure. And that&rsquo;s totally okay.</p>

<p>Learning to accept failure is hard. I think the only way to get better at it is to fail a lot. However, you can fail gracefully, and you can fail hard. You can other get depressed over it, or you can take it as a learning experience. I tried to do the latter, and so, here&rsquo;s what I learned:</p>

<ol>
<li><p>I completely overestimated my abilities. I thought I understood everything about Rails. Okay, maybe that&rsquo;s not true, but I thought I could at least get a simple app up and running. The problem was that my app was not actually simple. The data models were different from anything I had ever worked with before, and I strugged to map out all of the model, view, and controller relationships. I also got way too caught up in trying to follow Rails conventions rather than just making something and fixing it later. It&rsquo;s a hackathon, after all, and a stupid one at that.</p></li>
<li><p>I underestimated how much time each separate piece would take. There were a few moving parts, including integrating with Stripe and Amazon&rsquo;s Mechanical Turk API. While using each one of these separate isn&rsquo;t so hard, getting the whole thing to work together is. And all of these things add up.</p></li>
<li><p>I underestimated time, in general. I forgot that hackathons are full of interesting people who are very distracting because I want to talk to them. I learned the best approach is to make something relatively simple, a minimum viable product, and then go from there.</p></li>
<li><p>I&rsquo;m pretty good at debugging. Once I had gotten exceedingly frustrated with my project, I went to help out a friend with a project. She was having some issues with her Chrome Extension, and I was able to throw in a few debugger statements in the right place and figure out what was going on. I also fixed the bug! It was cool, knowing that I&rsquo;m good at breaking down a problem like that. I guess it makes sense though, since that&rsquo;s mostly what I did at my previous job.</p></li>
<li><p>I got way too excited about my project before thinking about the other people around me. I should have focused on the skillset of the people around me rather than getting excited about my dumb idea. Working with people is kind of the point of a hackathon.</p></li>
<li><p>I need to get better at being impulsive. I spend too much time marinating on thoughts and not just doing sometimes. It&rsquo;s like Drake says, YOLO.</p></li>
</ol>


<p><img class="center" src="http://media.giphy.com/media/NHCBJNduOcwrS/giphy.gif"></p>

<ol>
<li>Presentation is an important aspect of your hackathon project. It might be worth it to run across the street and buy matching bugundy turtlenecks with your project partner. It&rsquo;s definitely worth it to make a great powerpoint, with lots of gifs and jokes.</li>
</ol>


<p>The best part is that I got to be around a bunch of other awesome people making awesome things. There was a Chrome Extension that mimicked browsing the web from within the North Korean intranet. There was one that told you whether or not you were holding your phone. There was one that translated movie subtitles to emojis. Every single one was simultaneously stupid and brilliant. These are my favorite types of projects.</p>

<p>Oh, and I got a pretty cool free t-shirt of George Bush with a selfie stick.</p>

<p>I&rsquo;m still in love with my project, despite having some rough moments with it, so maybe I&rsquo;ll finish it one day. Hopefully. And at the next hackathon I go to, I&rsquo;m going to kill it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Git Better (and Pay Attention in Lecture Better)]]></title>
    <link href="http:///blog/2014/11/06/use-git-better/"/>
    <updated>2014-11-06T20:16:14-05:00</updated>
    <id>http:///blog/2014/11/06/use-git-better</id>
    <content type="html"><![CDATA[<p>When I first learned git, I thought I understood it all. I had a grasp of the process of cloning a repository, making your own changes, and then making a pull request. I had made sense of it by making analogies to the old days when I worked in subversion. But then, I started to think about how to use git in production. And the question dawned on me: how do I synchronize with the master branch of the repository that I forked <em>from</em>? I understood the workflow of having a lot of local repositories and one remote, but when in came to multiple remote repositories, I was lost.</p>

<p>As it turns out, it&rsquo;s easy to set up. First, make sure you&rsquo;ve forked a repository, and have cloned your version locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:catarak/ruby-lectures-ruby-006.git <span class="o">&amp;&amp;</span> <span class="nb">cd </span>ruby-lectures-ruby-006
</span></code></pre></td></tr></table></div></figure>


<p>Then, if you&rsquo;re in the local directory of your cloned repository,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>13:11:09<span class="o">]</span> <span class="o">(</span>master<span class="o">)</span> ruby-lectures-ruby-006
</span><span class='line'><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see your configured remote repositories by running,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote -v
</span><span class='line'>origin  git@github.com:catarak/ruby-lectures-ruby-006.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin  git@github.com:catarak/ruby-lectures-ruby-006.git <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then add the remote repository that you forked from as &ldquo;upstream,&rdquo; like so,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote add upstream git@github.com:flatiron-school-ironboard/ruby-lectures-ruby-006.git
</span></code></pre></td></tr></table></div></figure>


<p>Then, if you run git remote -v again,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote -v
</span><span class='line'>origin  git@github.com:catarak/ruby-lectures-ruby-006.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin  git@github.com:catarak/ruby-lectures-ruby-006.git <span class="o">(</span>push<span class="o">)</span>
</span><span class='line'>upstream  git@github.com:flatiron-school-ironboard/ruby-lectures-ruby-006.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>upstream  git@github.com:flatiron-school-ironboard/ruby-lectures-ruby-006.git <span class="o">(</span>push<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will see that you have added a new remote.</p>

<p>Now that we&rsquo;ve set that up, you can now easily synchronize your fork. First, fetch the remote repository,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git fetch upstream
</span><span class='line'>remote: Counting objects: 22, <span class="k">done</span>.
</span><span class='line'>remote: Compressing objects: 100% <span class="o">(</span>9/9<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>remote: Total <span class="m">22</span> <span class="o">(</span>delta 16<span class="o">)</span>, reused <span class="m">19</span> <span class="o">(</span>delta 13<span class="o">)</span>
</span><span class='line'>Unpacking objects: 100% <span class="o">(</span>22/22<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>From github.com:flatiron-school-ironboard/ruby-lectures-ruby-006
</span><span class='line'>   7bfa768..68d09cc  master     -&gt; upstream/master
</span></code></pre></td></tr></table></div></figure>


<p>Then, make sure you&rsquo;re on the master branch,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout master
</span></code></pre></td></tr></table></div></figure>


<p>And then merge in the changes. You may have some merge conflicts (if, say, you&rsquo;ve been taking some lecture notes),</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git merge upstream/master
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/db/schema.rb
</span><span class='line'>CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in rails-lecture-7/todoapp/db/schema.rb
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/config/routes.rb
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/config/initializers/omniauth.rb
</span><span class='line'>CONFLICT <span class="o">(</span>add/add<span class="o">)</span>: Merge conflict in rails-lecture-7/todoapp/config/initializers/omniauth.rb
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/app/views/lists/index.html.erb
</span><span class='line'>CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in rails-lecture-7/todoapp/app/views/lists/index.html.erb
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/app/models/user.rb
</span><span class='line'>CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in rails-lecture-7/todoapp/app/models/user.rb
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/app/controllers/sessions_controller.rb
</span><span class='line'>CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in rails-lecture-7/todoapp/app/controllers/sessions_controller.rb
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/app/controllers/application_controller.rb
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/Gemfile.lock
</span><span class='line'>CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in rails-lecture-7/todoapp/Gemfile.lock
</span><span class='line'>Auto-merging rails-lecture-7/todoapp/Gemfile
</span><span class='line'>Automatic merge failed<span class="p">;</span> fix conflicts and <span class="k">then</span> commit the result.
</span></code></pre></td></tr></table></div></figure>


<p>If there are no conflicts, the changes will be commited automatically. If there are merge conflicts, add your changes and commit then:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -am <span class="s2">&quot;fixin merge conflicts&quot;</span>
</span><span class='line'><span class="o">[</span>master b2c9367<span class="o">]</span> fixin merge conflicts
</span></code></pre></td></tr></table></div></figure>


<p>And now, you&rsquo;re done.</p>

<p><img class="center" src="http://media.giphy.com/media/Y1N6D0KQODwzu/giphy.gif"></p>

<p>The benefit of setting this up is that you can easily merge in the latest changes from the master of the project, but also have your own version. You can also not worry about accidentally pushing to the master of the repository you forked from.</p>

<p>The benefit of this for me, currently, is that I&rsquo;m a student at The Flatiron School. Our lecture notes are a repository. By doing this, I can take better notes in lecture. I like to try to keep up, and type everything that&rsquo;s happening in lecture. If I find that I have a typo or some other issue, I&rsquo;ll forget about it and keep writing stuff along with the instructor. Then, when lecture is over, I&rsquo;ll merge in what was happening in lecture, fixing everything that wasn&rsquo;t working during lecture. I find that by doing this, I&rsquo;m more engaged in lecture and the information sticks.</p>

<p>As a side note, watch out for duplicate migrations. If you&rsquo;re following everything in class, you probably would have created the same migrations as the instructor but at a slightly different time. Just delete one of the duplicates and then commit your changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming, in Brief]]></title>
    <link href="http:///blog/2014/10/26/metaprogramming/"/>
    <updated>2014-10-26T23:03:36-04:00</updated>
    <id>http:///blog/2014/10/26/metaprogramming</id>
    <content type="html"><![CDATA[<p>Coming from a background in compiled languages, the idea of metaprogramming is fascinating to me. In the world of C, writing and running programs are distinct actions. At runtime, a program cannot be altered. However, in Ruby, the actual code can be modified while it is executing. To those who only know Ruby or similar interpreted languages, it may not seem like a big deal, but to me, it&rsquo;s the coolest thing ever. At a hackathon I went to once a guy wrote a self-modifying program in Python, and I thought it was black magic. I didn&rsquo;t realize it was just a gift that comes with the language, and you didn&rsquo;t have to do any serious hacking to dynamically alter the code.</p>

<p>Let&rsquo;s just look at eval. Maybe this isn&rsquo;t so exciting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;2 + 2&quot;</span><span class="p">)</span> <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure>


<p>But then, consider this ditty:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Please enter a phrase: &quot;</span>
</span><span class='line'><span class="c1"># pretend you entered Hello World here</span>
</span><span class='line'><span class="n">phrase</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Enter the name of a string method: &quot;</span>
</span><span class='line'><span class="c1"># pretend that you entered upcase here</span>
</span><span class='line'><span class="n">method_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="n">exp</span> <span class="o">=</span> <span class="s2">&quot;&#39;</span><span class="si">#{</span><span class="n">phrase</span><span class="si">}</span><span class="s2">&#39;.</span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">eval</span><span class="p">(</span><span class="n">exp</span><span class="p">)</span> <span class="c1"># =&gt; HELLO WORLD</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">exp</span><span class="si">}</span><span class="s2">&quot;</span> <span class="c1"># =&gt; &#39;Hello World&#39;.upcase</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty cool. You just wrote a little program on the fly. What else can you do? You can write a program that writes programs.</p>

<p><img class="center" src="http://i.imgur.com/pz0sYGz.jpg"></p>

<p>Yeah dawg. I&rsquo;m for real. This is all of the code it takes (Adapted from <a href="http://www.sapphiresteel.com/The-Book-Of-Ruby">The Book of Ruby by Huw Collingbourne</a>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">program</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">input</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">!=</span> <span class="s2">&quot;q&quot;</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span> <span class="s2">&quot;?&gt; &quot;</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">line</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Evaluating...&quot;</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="n">input</span>
</span><span class='line'>    <span class="n">program</span> <span class="o">+=</span> <span class="n">input</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s1">&#39;l&#39;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Listing the program you&#39;ve written so far...&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">program</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">+=</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run this, you kind of have a REPL, but it&rsquo;s significantly dumber than IRB:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>?> def scramble(s)
</span><span class='line'>?> s.split("").shuffle.join("")
</span><span class='line'>?> end
</span><span class='line'>?> 
</span><span class='line'>Evaluating...
</span><span class='line'>?> puts scramble("Hello")
</span><span class='line'>?> 
</span><span class='line'>Evaluating...
</span><span class='line'>Holle</span></code></pre></td></tr></table></div></figure>


<p>Cool. So what other applications does metaprogramming have in Ruby besides writing REPL&rsquo;s? As it turns out, it&rsquo;s one of my favorite things I&rsquo;ve learned about in Ruby thus far: ActiveRecord. When you define associations between models, whether it be belongs_to or has_many or anything else, the methods that you get for free are all generated on the fly. It does this using eigen or singleton classes. This is having the ability to define methods for specific instances of a class, after the class has already been defined. For example, say you define a class like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Roomba</span>
</span><span class='line'>  <span class="c1"># Some other methods</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">vacuum_floor</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">floor</span><span class="o">.</span><span class="n">dirty?</span>
</span><span class='line'>      <span class="c1">#vacuum for 5 seconds</span>
</span><span class='line'>      <span class="n">vacuum</span><span class="p">(</span><span class="mi">5000</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">clogged</span>
</span><span class='line'>        <span class="k">raise</span> <span class="no">Roomba</span><span class="o">::</span><span class="no">CloggedException</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you would instantiate it as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Roomba</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>But say you got the newer model, which knows how to unclog itself. Then you could do something like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">fido</span><span class="o">.</span><span class="nf">vacuum_floor</span>
</span><span class='line'>  <span class="c1">#vacuum for 5 seconds</span>
</span><span class='line'>  <span class="n">vacuum</span><span class="p">(</span><span class="mi">5000</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">clogged</span>
</span><span class='line'>    <span class="n">reverse_suction</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also this other fancy syntax you can use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">fido</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">vacuum_with_style</span>
</span><span class='line'>    <span class="n">vacuum</span><span class="p">(</span><span class="mi">5000</span><span class="p">)</span>
</span><span class='line'>    <span class="n">robo_boogie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks mysterious, but it&rsquo;s doing the same thing, I swear.</p>

<p>You can actually define singleton methods for classes as well, and they&rsquo;re simply called class methods. You can do this in a number of ways:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Roomba</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">warranty</span>
</span><span class='line'>    <span class="s2">&quot;Lifetime&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the syntax we&rsquo;re familiar with. But there&rsquo;s more:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Roomba</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">warranty</span>
</span><span class='line'>      <span class="s2">&quot;Lifetime&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">Roomba</span><span class="o">.</span><span class="nf">warranty</span>
</span><span class='line'>  <span class="s2">&quot;Lifetime&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="no">Roomba</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">warranty</span>
</span><span class='line'>    <span class="s2">&quot;Lifetime&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveRecord creates new singleton methods for instances and classes when you define associations. It may seem like magic, but that magic is just metaprogramming.</p>

<p><img class="center" src="http://media.giphy.com/media/ujUdrdpX7Ok5W/giphy.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[6 Life-Changing Things About Ruby Regular Expressions]]></title>
    <link href="http:///blog/2014/10/13/ruby-regular-expressions/"/>
    <updated>2014-10-13T12:03:23-04:00</updated>
    <id>http:///blog/2014/10/13/ruby-regular-expressions</id>
    <content type="html"><![CDATA[<h3>1. The Equals Tilde</h3>

<p>What&rsquo;s an equalstilde, you say? Who would come up with such a dumb sounding name for an operator? It actually lies at the foundation of Ruby regular expressions. It allows you to apply a regular expression to a string, and returns the index within the string where the regular expression matches. For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/Lisa/</span> <span class="o">=~</span> <span class="s2">&quot;You&#39;re tearing me apart, Lisa!&quot;</span> <span class="c1">#=&gt; 25</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Matchdata</h3>

<p>Instead of using the equalstilde, you can also use a string method called match to apply a regular expression to a string. However, instead of returning an index, it returns this weird type of object called MatchData:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;You&#39;re tearing me apart, Lisa!&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/Lisa/</span><span class="p">)</span> <span class="c1">#=&gt; #&lt;MatchData &quot;Lisa&quot;&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, so then what do you do with a MatchData object? It all makes sense when you learn about this crazy thing called&hellip;</p>

<h3>3. Capture groups</h3>

<p>Get ready to have your mind blown. In Ruby, if you use parenthesis in a regular expression, you can utilize capture groups. You can extract multiple parts from a string without using multiple regular expressions, just by putting the part of the string you want to capture. Get out, I know. It&rsquo;s awesome. For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;I mean, the candles, the music, the sexy dress... </span>
</span><span class='line'><span class="s2">       what&#39;s going on here?&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/the (.*), the (.*), the (.*)\.\.\./</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;MatchData &quot;the candles, the music, the sexy dress...&quot; </span>
</span><span class='line'><span class="c1"># 1:&quot;candles&quot; 2:&quot;music&quot; 3:&quot;sexy dress&quot;&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you can access each of the capture groups separately, like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># =&gt; &quot;the candles, the music, the sexy dress...&quot;</span>
</span><span class='line'><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1"># =&gt; &quot;candles&quot; </span>
</span><span class='line'><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># =&gt; &quot;music&quot;</span>
</span><span class='line'><span class="n">m</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="c1"># =&gt; &quot;sexy dress&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even name your capture groups:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;I mean, the candles, the music, the sexy dress... </span>
</span><span class='line'><span class="s2">       what&#39;s going on here?&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/the (?&lt;sexy_item_1&gt;.*), the (?&lt;sexy_item_2&gt;.*), the (?&lt;sexy_item_3&gt;.*)\.\.\./</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;MatchData &quot;the candles, the music, the sexy dress...&quot; </span>
</span><span class='line'><span class="c1"># 1:&quot;candles&quot; 2:&quot;music&quot; 3:&quot;sexy dress&quot;&gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can access each group using hash syntax:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">m</span><span class="o">[</span><span class="n">sexy_item_1</span><span class="o">]</span> <span class="c1"># =&gt; &quot;candles&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>4. Atomic Grouping</h3>

<p>An atomic group is a type of capture group. When the regex engine exits it, all backtracking positions are discarded. Let&rsquo;s go over two cases, one that uses atomic grouping, and one that doesn&rsquo;t, and see how the regex engine would operate.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Tommy Wiseau&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/\A(Tommy|Thomas|Tom)\z/</span><span class="p">)</span> <span class="c1"># =&gt; nil </span>
</span></code></pre></td></tr></table></div></figure>


<p>The regex engine first matches the start of the string, \A, and then matches &ldquo;Tommy&rdquo;. However, since it then would leave the capture group and try to match the \z, or the end of a string, the match would fail. The engine would then go back and try to match Thomas, and fail, try to match Tom, and ultimately stop and declare failure. But say we want to shorten this process.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Tommy Wiseau&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/\A(?&gt;Tommy|Thomas|Tom)\z/</span><span class="p">)</span> <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, again, the \A is matched as the start of the string, and then the engine tries to match &ldquo;Tommy&rdquo;. It succeeds and moves onto matching \z, which fails. Because of the atomic grouping, the engine has thrown out all back tracing data upon reaching the \z, and therefore fails after only trying to match &ldquo;Tommy&rdquo; rather than all three options in the capture group.</p>

<h3>5. Subexpression Calls</h3>

<p>Okay. Okay. This one is probably the most radical thing about regular expressions.</p>

<p>By using the \g<name> syntax, you can match a previously named subexpression, which can be a group name or number. An example better demonstrates how you use it.</p>

<p>Say that you want to make sure all parenthesis surrounding a string are always balanced. You would use something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;(spoons)&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(?&lt;paren&gt;\([^()]*\g&lt;paren&gt;*\))/</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;MatchData &quot;(spoons)&quot; paren:&quot;(spoons)&quot;&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;((spoons))&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(?&lt;paren&gt;\([^()]*\g&lt;paren&gt;*\))/</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;MatchData &quot;((spoons))&quot; paren:&quot;((spoons))&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;((spoons)&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(?&lt;paren&gt;\([^()]*\g&lt;paren&gt;*\))/</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;MatchData &quot;&quot; paren:nil&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool. Pretty cool. Let&rsquo;s go over what the regex engine does.</p>

<ol>
<li>Enter a capture group named <em>paren</em>.</li>
<li>Match a literal <em>(</em>.</li>
<li>Match the text in between the parenthesis that is anything except for parenthesis.</li>
<li>Call the <em>paren</em> capture group again, dropping the part in the middle of the parentheses for now.</li>
<li>Enter the <em>paren</em> capture group again</li>
<li>Match a literal <em>(</em>, the second character in the group</li>
<li>Match the text in between the parenthesis that is anything except for parenthesis.</li>
<li>Try to call <em>paren</em> again, but fail since it would cause the match thus far to fail.</li>
<li>Match a literal <em>)</em> n times, where n is the depth of the recursion.</li>
</ol>


<p>Note that the * following \g<paren> is extremely important. This allows the regular expression to break out of recursion, since the subexpression can exist 0 or many times. Without it, the recursion would be never ending.</p>

<h3>6. Lookahead and lookbehind assertions</h3>

<p>What if you want to make sure certain characters exist in a regular expression, but you don&rsquo;t want them to be part of your match group? This is when you would want to use a special type of anchor, called lookahead and lookbeind assertions.</p>

<ul>
<li><em>(?=pat)</em> is a positive lookahead assertion, and ensures that the characters following your expression match &ldquo;pat&rdquo;</li>
<li><em>(?!pat)</em> is a negative lookahead assertion, and ensures that the characters following your expression do not match &ldquo;pat&rdquo;</li>
<li><em>(?&lt;=pat)</em> is a positive lookbehind assertion, and ensures that the characters preceeding your expression match &ldquo;pat&rdquo;</li>
<li><em>(?&lt;!pat)</em> is a negative lookbehind assertion, and ensures that the characters preceeding your expression do not match &ldquo;pat&rdquo;</li>
</ul>


<p>Pretty fantastic, right? For example, say you have a list of emails, and you&rsquo;re trying to find the usernames of all of the ones at a certain domain:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;mark@theroom.com&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/.*(?=@theroom.com)/</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;MatchData &quot;mark&quot;&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;johnny@theroom.com&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/.*(?=theroom.com)/</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; #&lt;MatchData &quot;johnny&quot;&gt; </span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;michael@troll2.com&quot;</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/.*(?=theroom.com)/</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other References</h2>

<p>If there&rsquo;s still more you want to know about regular expressions in Ruby, I recommend looking at the <a href="http://www.ruby-doc.org/core-2.1.3/Regexp.html">Ruby Docs</a> or visiting the webstite <a href="http://www.regular-expressions.info/">Regular-Expressions.info</a>, which contains more than you&rsquo;d ever want to know about regular expressions. In the best way possible.</p>
]]></content>
  </entry>
  
</feed>
