<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Metaprogramming | Ear to the Bits]]></title>
  <link href="http:///blog/categories/metaprogramming/atom.xml" rel="self"/>
  <link href="http:///"/>
  <updated>2014-12-06T16:47:42-05:00</updated>
  <id>http:///</id>
  <author>
    <name><![CDATA[Cassie Tarakajian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Metaprogramming, in Brief]]></title>
    <link href="http:///blog/2014/10/26/metaprogramming/"/>
    <updated>2014-10-26T23:03:36-04:00</updated>
    <id>http:///blog/2014/10/26/metaprogramming</id>
    <content type="html"><![CDATA[<p>Coming from a background in compiled languages, the idea of metaprogramming is fascinating to me. In the world of C, writing and running programs are distinct actions. At runtime, a program cannot be altered. However, in Ruby, the actual code can be modified while it is executing. To those who only know Ruby or similar interpreted languages, it may not seem like a big deal, but to me, it&rsquo;s the coolest thing ever. At a hackathon I went to once a guy wrote a self-modifying program in Python, and I thought it was black magic. I didn&rsquo;t realize it was just a gift that comes with the language, and you didn&rsquo;t have to do any serious hacking to dynamically alter the code.</p>

<p>Let&rsquo;s just look at eval. Maybe this isn&rsquo;t so exciting:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>But then, consider this ditty:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Please</span> <span class="n">enter</span> <span class="n">a</span> <span class="ss">phrase</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;pretend you entered Hello World here&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">phrase</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Enter</span> <span class="n">the</span> <span class="nb">name</span> <span class="n">of</span> <span class="n">a</span> <span class="n">string</span> <span class="nb">method</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;pretend that you entered upcase here&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">method_name</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="n">exp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#{phrase}&amp;rsquo;.#{method_name}&amp;rdquo;</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">eval</span><span class="p">(</span><span class="n">exp</span><span class="p">)</span> <span class="c1"># =&gt; HELLO WORLD</span>
</span><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{exp}&amp;rdquo; # =&gt; &amp;lsquo;Hello World&amp;rsquo;.upcase</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That&rsquo;s pretty cool. You just wrote a little program on the fly. What else can you do? You can write a program that writes programs.</p>

<p><img class="center <a" src="href="http://i.imgur.com/pz0sYGz.jpg">http://i.imgur.com/pz0sYGz.jpg</a>&#8221;></p>

<p>Yeah dawg. I&rsquo;m for real. This is all of the code it takes (Adapted from <a href="http://www.sapphiresteel.com/The-Book-Of-Ruby">The Book of Ruby by Huw Collingbourne</a>):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">program</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">input</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">q</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="sc">?&gt;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">line</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">when</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Evaluating</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="n">input</span>
</span><span class='line'>    <span class="n">program</span> <span class="o">+=</span> <span class="n">input</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">when</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">l</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Listing</span> <span class="n">the</span> <span class="n">program</span> <span class="n">you</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">ve</span> <span class="n">written</span> <span class="n">so</span> <span class="n">far</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">program</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">+=</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If you run this, you kind of have a REPL, but it&rsquo;s significantly dumber than IRB:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>?> def scramble(s)
</span><span class='line'>?> s.split(&ldquo;&rdquo;).shuffle.join(&ldquo;&rdquo;)
</span><span class='line'>?> end
</span><span class='line'>?>
</span><span class='line'>Evaluating&hellip;
</span><span class='line'>?> puts scramble(&ldquo;Hello&rdquo;)
</span><span class='line'>?>
</span><span class='line'>Evaluating&hellip;
</span><span class='line'>Holle</span></code></pre></td></tr></table></div></figure></p>

<p>Cool. So what other applications does metaprogramming have in Ruby besides writing REPL&rsquo;s? As it turns out, it&rsquo;s one of my favorite things I&rsquo;ve learned about in Ruby thus far: ActiveRecord. When you define associations between models, whether it be belongs_to or has_many or anything else, the methods that you get for free are all generated on the fly. It does this using eigen or singleton classes. This is having the ability to define methods for specific instances of a class, after the class has already been defined. For example, say you define a class like so:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Roomba</span>
</span><span class='line'>  <span class="c1"># Some other methods</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">vacuum_floor</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">floor</span><span class="o">.</span><span class="n">dirty?</span>
</span><span class='line'>      <span class="c1">#vacuum for 5 seconds</span>
</span><span class='line'>      <span class="n">vacuum</span><span class="p">(</span><span class="mi">5000</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">clogged</span>
</span><span class='line'>        <span class="k">raise</span> <span class="no">Roomba</span><span class="o">::</span><span class="no">CloggedException</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then you would instantiate it as</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Roomba</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>But say you got the newer model, which knows how to unclog itself. Then you could do something like</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">fido</span><span class="o">.</span><span class="nf">vacuum_floor</span>
</span><span class='line'>  <span class="c1">#vacuum for 5 seconds</span>
</span><span class='line'>  <span class="n">vacuum</span><span class="p">(</span><span class="mi">5000</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">clogged</span>
</span><span class='line'>    <span class="n">reverse_suction</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There&rsquo;s also this other fancy syntax you can use:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">fido</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">vacuum_with_style</span>
</span><span class='line'>    <span class="n">vacuum</span><span class="p">(</span><span class="mi">5000</span><span class="p">)</span>
</span><span class='line'>    <span class="n">robo_boogie</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It looks mysterious, but it&rsquo;s doing the same thing, I swear.</p>

<p>You can actually define singleton methods for classes as well, and they&rsquo;re simply called class methods. You can do this in a number of ways:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Roomba</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">warranty</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Lifetime</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is the syntax we&rsquo;re familiar with. But there&rsquo;s more:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Roomba</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">warranty</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Lifetime</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def Roomba.warranty</span>
</span><span class='line'><span class="sr">  &amp;ldquo;Lifetime&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Roomba</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">warranty</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Lifetime</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>ActiveRecord creates new singleton methods for instances and classes when you define associations. It may seem like magic, but that magic is just metaprogramming.</p>

<p><img class="center <a" src="href="http://media.giphy.com/media/ujUdrdpX7Ok5W/giphy.gif">http://media.giphy.com/media/ujUdrdpX7Ok5W/giphy.gif</a>&#8221;></p>
]]></content>
  </entry>
  
</feed>
